name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: '1.24'
  PROJECT_NAME: anyproxy

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.6
        golangci-lint run --timeout=10m

  test:
    name: Test
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Generate certificates
      run: |
        mkdir -p certs
        openssl req -x509 -newkey rsa:2048 -keyout certs/server.key -out certs/server.crt \
          -days 365 -nodes -subj "/CN=localhost" \
          -addext "subjectAltName = DNS:localhost,IP:127.0.0.1"

    - name: Build binaries
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p build/${{ matrix.goos }}-${{ matrix.goarch }}
        
        # Set binary extension for Windows
        EXT=""
        if [ "${{ matrix.goos }}" = "windows" ]; then
          EXT=".exe"
        fi
        
        # Build v2 gateway and client
        go build -ldflags="-s -w" -o build/${{ matrix.goos }}-${{ matrix.goarch }}/${{ env.PROJECT_NAME }}-gateway-v2${EXT} cmd/v2/gateway/main.go
        go build -ldflags="-s -w" -o build/${{ matrix.goos }}-${{ matrix.goarch }}/${{ env.PROJECT_NAME }}-client-v2${EXT} cmd/v2/client/main.go
        
        # Copy configuration files and certificates
        cp -r configs build/${{ matrix.goos }}-${{ matrix.goarch }}/
        cp -r certs build/${{ matrix.goos }}-${{ matrix.goarch }}/
        cp README.md build/${{ matrix.goos }}-${{ matrix.goarch }}/

    - name: Create archive
      run: |
        cd build
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip -r ${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip ${{ matrix.goos }}-${{ matrix.goarch }}
        else
          tar -czf ${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz ${{ matrix.goos }}-${{ matrix.goarch }}
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          build/${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}.*
        retention-days: 30

  docker:
    name: Build Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release/
        
        # Generate checksums
        cd release
        sha256sum * > checksums.txt

    - name: Extract release notes
      id: extract_notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Simple release notes
        echo "AnyProxy $VERSION" > release_notes.md
        echo "" >> release_notes.md
        echo "## Features" >> release_notes.md
        echo "- Secure tunneling with WebSocket, gRPC, and QUIC transports" >> release_notes.md
        echo "- HTTP/HTTPS and SOCKS5 proxy support" >> release_notes.md
        echo "- Group-based routing and port forwarding" >> release_notes.md
        echo "" >> release_notes.md
        echo "See [README.md](README.md) for usage instructions." >> release_notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ steps.extract_notes.outputs.version }}
        body_path: release_notes.md
        files: |
          release/*
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}